{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Documents\\\\phone_selling_app\\\\frontend\\\\User\\\\src\\\\contexts\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { ApiService } from '../services/api';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useLocalStorage('cartItems', []);\n  const [guestCartItems, setGuestCartItems] = useLocalStorage('guestCartItems', []);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [total, setTotal] = useState(0);\n  const [itemCount, setItemCount] = useState(0);\n  const {\n    isAuthenticated,\n    user\n  } = useAuth();\n\n  // Log khi khởi tạo\n  useEffect(() => {\n    console.log('[CartContext] Initialized', {\n      itemCount: cartItems.length,\n      isAuthenticated\n    });\n  }, []);\n\n  // Tải giỏ hàng và xử lý chuyển đổi khi trạng thái đăng nhập thay đổi\n  useEffect(() => {\n    const handleAuthChange = async () => {\n      console.log('[CartContext] handleAuthChange - auth status changed', {\n        isAuthenticated,\n        hasUser: !!user\n      });\n      if (isAuthenticated && user) {\n        // Người dùng vừa đăng nhập\n        setLoading(true);\n        try {\n          console.log('[CartContext] handleAuthChange - user logged in, loading cart from API');\n          // Tải giỏ hàng từ API\n          const userCart = await ApiService.getCart();\n          let mergedCart = [];\n\n          // Kiểm tra giỏ hàng khách\n          if (guestCartItems && guestCartItems.length > 0) {\n            console.log('[CartContext] handleAuthChange - merging guest cart with user cart');\n\n            // Nếu có sẵn giỏ hàng khách, hợp nhất với giỏ hàng người dùng\n            const combinedCartItems = [...((userCart === null || userCart === void 0 ? void 0 : userCart.items) || [])];\n\n            // Thêm các sản phẩm từ giỏ hàng khách vào giỏ hàng người dùng\n            for (const guestItem of guestCartItems) {\n              // Kiểm tra xem sản phẩm đã có trong giỏ hàng người dùng chưa\n              const existingItemIndex = combinedCartItems.findIndex(item => item.id === guestItem.id);\n              if (existingItemIndex >= 0) {\n                // Cập nhật số lượng nếu đã có\n                combinedCartItems[existingItemIndex].quantity += guestItem.quantity;\n              } else {\n                // Thêm mới nếu chưa có\n                combinedCartItems.push({\n                  ...guestItem\n                });\n              }\n\n              // Đồng bộ với API (trong môi trường thực tế)\n              await ApiService.addToCart(guestItem.id, guestItem.quantity);\n            }\n            mergedCart = combinedCartItems;\n            // Xóa giỏ hàng khách sau khi đã hợp nhất\n            setGuestCartItems([]);\n          } else {\n            // Nếu không có giỏ hàng khách, chỉ sử dụng giỏ hàng người dùng\n            mergedCart = (userCart === null || userCart === void 0 ? void 0 : userCart.items) || [];\n          }\n          console.log('[CartContext] handleAuthChange - set merged cart', {\n            itemCount: mergedCart.length\n          });\n          setCartItems(mergedCart);\n        } catch (err) {\n          console.error('[CartContext] handleAuthChange - error loading user cart', err);\n          setError('Không thể tải giỏ hàng. Vui lòng thử lại sau.');\n        } finally {\n          setLoading(false);\n        }\n      } else if (!isAuthenticated) {\n        // Người dùng vừa đăng xuất\n        console.log('[CartContext] handleAuthChange - user logged out, using guest cart');\n        // Chuyển sang giỏ hàng khách\n        setCartItems(guestCartItems);\n      }\n    };\n    handleAuthChange();\n  }, [isAuthenticated, user, setCartItems, guestCartItems, setGuestCartItems]);\n\n  // Calculate totals whenever cart items change\n  useEffect(() => {\n    const calculateTotals = () => {\n      const itemTotal = cartItems.reduce((total, item) => {\n        const price = item.discountPrice || item.price;\n        return total + price * item.quantity;\n      }, 0);\n      const count = cartItems.reduce((count, item) => count + item.quantity, 0);\n      setTotal(itemTotal);\n      setItemCount(count);\n      console.log('[CartContext] Totals updated', {\n        total: itemTotal,\n        itemCount: count\n      });\n    };\n    calculateTotals();\n  }, [cartItems]);\n\n  // Thêm vào giỏ hàng, xử lý cả đã đăng nhập và chưa đăng nhập\n  const addToCart = async (product, quantity = 1) => {\n    console.log('[CartContext] addToCart - start', {\n      productId: product.id,\n      productName: product.name,\n      quantity,\n      isAuthenticated\n    });\n    setLoading(true);\n    setError(null);\n    try {\n      if (isAuthenticated) {\n        // Nếu đã đăng nhập, gọi API để thêm vào giỏ hàng\n        console.log('[CartContext] addToCart - calling API (authenticated)');\n        await ApiService.addToCart(product.id, quantity);\n      } else {\n        // Nếu chưa đăng nhập, chỉ lưu vào localStorage\n        console.log('[CartContext] addToCart - adding to guest cart (not authenticated)');\n\n        // Cập nhật giỏ hàng khách\n        setGuestCartItems(prevItems => {\n          const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n          if (existingItemIndex >= 0) {\n            // Cập nhật số lượng nếu sản phẩm đã tồn tại\n            const updatedItems = [...prevItems];\n            updatedItems[existingItemIndex] = {\n              ...updatedItems[existingItemIndex],\n              quantity: updatedItems[existingItemIndex].quantity + quantity\n            };\n            return updatedItems;\n          } else {\n            // Thêm mới nếu sản phẩm chưa tồn tại\n            return [...prevItems, {\n              ...product,\n              quantity\n            }];\n          }\n        });\n      }\n\n      // Cập nhật state cartItems (hiển thị cho người dùng)\n      setCartItems(prevItems => {\n        // Kiểm tra sản phẩm đã tồn tại chưa\n        const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n        if (existingItemIndex >= 0) {\n          // Cập nhật số lượng nếu đã tồn tại\n          console.log('[CartContext] addToCart - updating existing item');\n          const updatedItems = [...prevItems];\n          updatedItems[existingItemIndex] = {\n            ...updatedItems[existingItemIndex],\n            quantity: updatedItems[existingItemIndex].quantity + quantity\n          };\n          return updatedItems;\n        } else {\n          // Thêm mới nếu chưa tồn tại\n          console.log('[CartContext] addToCart - adding new item');\n          return [...prevItems, {\n            ...product,\n            quantity\n          }];\n        }\n      });\n      console.log('[CartContext] addToCart - success');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('[CartContext] addToCart - error', err);\n      setError(err.message || 'Không thể thêm sản phẩm vào giỏ hàng');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cập nhật số lượng sản phẩm trong giỏ hàng\n  const updateCartItemQuantity = async (productId, quantity) => {\n    console.log('[CartContext] updateCartItemQuantity', {\n      productId,\n      quantity,\n      isAuthenticated\n    });\n    setLoading(true);\n    setError(null);\n    try {\n      if (quantity <= 0) {\n        // Nếu số lượng <= 0, xóa sản phẩm khỏi giỏ hàng\n        console.log('[CartContext] updateCartItemQuantity - removing item (quantity <= 0)');\n        return removeFromCart(productId);\n      }\n      if (isAuthenticated) {\n        // Nếu đã đăng nhập, gọi API để cập nhật\n        console.log('[CartContext] updateCartItemQuantity - calling API (authenticated)');\n        await ApiService.updateCartItem(productId, quantity);\n      } else {\n        // Nếu chưa đăng nhập, cập nhật giỏ hàng khách\n        console.log('[CartContext] updateCartItemQuantity - updating guest cart (not authenticated)');\n        setGuestCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n          ...item,\n          quantity\n        } : item));\n      }\n\n      // Cập nhật state cartItems (hiển thị cho người dùng)\n      setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n        ...item,\n        quantity\n      } : item));\n      console.log('[CartContext] updateCartItemQuantity - success');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('[CartContext] updateCartItemQuantity - error', err);\n      setError(err.message || 'Không thể cập nhật số lượng sản phẩm');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Xóa sản phẩm khỏi giỏ hàng\n  const removeFromCart = async productId => {\n    console.log('[CartContext] removeFromCart', {\n      productId,\n      isAuthenticated\n    });\n    setLoading(true);\n    setError(null);\n    try {\n      if (isAuthenticated) {\n        // Nếu đã đăng nhập, gọi API để xóa\n        console.log('[CartContext] removeFromCart - calling API (authenticated)');\n        await ApiService.removeFromCart(productId);\n      } else {\n        // Nếu chưa đăng nhập, cập nhật giỏ hàng khách\n        console.log('[CartContext] removeFromCart - updating guest cart (not authenticated)');\n        setGuestCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n      }\n\n      // Cập nhật state cartItems (hiển thị cho người dùng)\n      setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n      console.log('[CartContext] removeFromCart - success');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('[CartContext] removeFromCart - error', err);\n      setError(err.message || 'Không thể xóa sản phẩm khỏi giỏ hàng');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Xóa toàn bộ giỏ hàng\n  const clearCart = async () => {\n    console.log('[CartContext] clearCart - start', {\n      isAuthenticated\n    });\n    setLoading(true);\n    setError(null);\n    try {\n      if (isAuthenticated) {\n        // Nếu đã đăng nhập, gọi API để xóa\n        console.log('[CartContext] clearCart - calling API (authenticated)');\n        // Đối với clearCart, chúng ta có thể cần gọi nhiều API để xóa từng sản phẩm\n        // hoặc có một API riêng để xóa toàn bộ giỏ hàng\n        for (const item of cartItems) {\n          await ApiService.removeFromCart(item.id);\n        }\n      } else {\n        // Nếu chưa đăng nhập, xóa giỏ hàng khách\n        console.log('[CartContext] clearCart - clearing guest cart (not authenticated)');\n        setGuestCartItems([]);\n      }\n\n      // Xóa state cartItems (hiển thị cho người dùng)\n      setCartItems([]);\n      console.log('[CartContext] clearCart - success');\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('[CartContext] clearCart - error', err);\n      setError(err.message || 'Không thể xóa giỏ hàng');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Chuyển từ giỏ hàng khách sang giỏ hàng đã đăng nhập\n  const migrateGuestCartToUserCart = async () => {\n    console.log('[CartContext] migrateGuestCartToUserCart - start', {\n      guestItemCount: guestCartItems.length,\n      isAuthenticated\n    });\n    if (!isAuthenticated || guestCartItems.length === 0) {\n      console.log('[CartContext] migrateGuestCartToUserCart - skipped (not authenticated or empty guest cart)');\n      return;\n    }\n    setLoading(true);\n    try {\n      // Đồng bộ từng sản phẩm trong giỏ hàng khách lên API\n      for (const item of guestCartItems) {\n        await ApiService.addToCart(item.id, item.quantity);\n      }\n\n      // Tải lại giỏ hàng từ API\n      const userCart = await ApiService.getCart();\n      setCartItems((userCart === null || userCart === void 0 ? void 0 : userCart.items) || []);\n\n      // Xóa giỏ hàng khách\n      setGuestCartItems([]);\n      console.log('[CartContext] migrateGuestCartToUserCart - success');\n    } catch (err) {\n      console.error('[CartContext] migrateGuestCartToUserCart - error', err);\n      setError('Không thể chuyển giỏ hàng. Vui lòng thử lại sau.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    cart: {\n      items: cartItems,\n      total,\n      itemCount\n    },\n    loading,\n    error,\n    addToCart,\n    updateCartItemQuantity,\n    removeFromCart,\n    clearCart,\n    migrateGuestCartToUserCart,\n    isAuthenticated\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"7DbqTl9POSyqDCIYZNjD62/sqaU=\", false, function () {\n  return [useLocalStorage, useLocalStorage, useAuth];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useLocalStorage","ApiService","useAuth","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","guestCartItems","setGuestCartItems","loading","setLoading","error","setError","total","setTotal","itemCount","setItemCount","isAuthenticated","user","console","log","length","handleAuthChange","hasUser","userCart","getCart","mergedCart","combinedCartItems","items","guestItem","existingItemIndex","findIndex","item","id","quantity","push","addToCart","err","calculateTotals","itemTotal","reduce","price","discountPrice","count","product","productId","productName","name","prevItems","updatedItems","success","message","updateCartItemQuantity","removeFromCart","updateCartItem","map","filter","clearCart","migrateGuestCartToUserCart","guestItemCount","value","cart","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GIGABYTE/Documents/phone_selling_app/frontend/User/src/contexts/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { useLocalStorage } from '../hooks/useLocalStorage';\r\nimport { ApiService } from '../services/api';\r\nimport { useAuth } from './AuthContext';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useLocalStorage('cartItems', []);\r\n  const [guestCartItems, setGuestCartItems] = useLocalStorage('guestCartItems', []);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [total, setTotal] = useState(0);\r\n  const [itemCount, setItemCount] = useState(0);\r\n  const { isAuthenticated, user } = useAuth();\r\n\r\n  // Log khi khởi tạo\r\n  useEffect(() => {\r\n    console.log('[CartContext] Initialized', {\r\n      itemCount: cartItems.length,\r\n      isAuthenticated\r\n    });\r\n  }, []);\r\n\r\n  // Tải giỏ hàng và xử lý chuyển đổi khi trạng thái đăng nhập thay đổi\r\n  useEffect(() => {\r\n    const handleAuthChange = async () => {\r\n      console.log('[CartContext] handleAuthChange - auth status changed', { isAuthenticated, hasUser: !!user });\r\n      \r\n      if (isAuthenticated && user) {\r\n        // Người dùng vừa đăng nhập\r\n        setLoading(true);\r\n        try {\r\n          console.log('[CartContext] handleAuthChange - user logged in, loading cart from API');\r\n          // Tải giỏ hàng từ API\r\n          const userCart = await ApiService.getCart();\r\n          let mergedCart = [];\r\n          \r\n          // Kiểm tra giỏ hàng khách\r\n          if (guestCartItems && guestCartItems.length > 0) {\r\n            console.log('[CartContext] handleAuthChange - merging guest cart with user cart');\r\n            \r\n            // Nếu có sẵn giỏ hàng khách, hợp nhất với giỏ hàng người dùng\r\n            const combinedCartItems = [...userCart?.items || []];\r\n            \r\n            // Thêm các sản phẩm từ giỏ hàng khách vào giỏ hàng người dùng\r\n            for (const guestItem of guestCartItems) {\r\n              // Kiểm tra xem sản phẩm đã có trong giỏ hàng người dùng chưa\r\n              const existingItemIndex = combinedCartItems.findIndex(item => item.id === guestItem.id);\r\n              \r\n              if (existingItemIndex >= 0) {\r\n                // Cập nhật số lượng nếu đã có\r\n                combinedCartItems[existingItemIndex].quantity += guestItem.quantity;\r\n              } else {\r\n                // Thêm mới nếu chưa có\r\n                combinedCartItems.push({ ...guestItem });\r\n              }\r\n              \r\n              // Đồng bộ với API (trong môi trường thực tế)\r\n              await ApiService.addToCart(guestItem.id, guestItem.quantity);\r\n            }\r\n            \r\n            mergedCart = combinedCartItems;\r\n            // Xóa giỏ hàng khách sau khi đã hợp nhất\r\n            setGuestCartItems([]);\r\n          } else {\r\n            // Nếu không có giỏ hàng khách, chỉ sử dụng giỏ hàng người dùng\r\n            mergedCart = userCart?.items || [];\r\n          }\r\n          \r\n          console.log('[CartContext] handleAuthChange - set merged cart', { itemCount: mergedCart.length });\r\n          setCartItems(mergedCart);\r\n        } catch (err) {\r\n          console.error('[CartContext] handleAuthChange - error loading user cart', err);\r\n          setError('Không thể tải giỏ hàng. Vui lòng thử lại sau.');\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      } else if (!isAuthenticated) {\r\n        // Người dùng vừa đăng xuất\r\n        console.log('[CartContext] handleAuthChange - user logged out, using guest cart');\r\n        // Chuyển sang giỏ hàng khách\r\n        setCartItems(guestCartItems);\r\n      }\r\n    };\r\n\r\n    handleAuthChange();\r\n  }, [isAuthenticated, user, setCartItems, guestCartItems, setGuestCartItems]);\r\n\r\n  // Calculate totals whenever cart items change\r\n  useEffect(() => {\r\n    const calculateTotals = () => {\r\n      const itemTotal = cartItems.reduce((total, item) => {\r\n        const price = item.discountPrice || item.price;\r\n        return total + price * item.quantity;\r\n      }, 0);\r\n      \r\n      const count = cartItems.reduce((count, item) => count + item.quantity, 0);\r\n      \r\n      setTotal(itemTotal);\r\n      setItemCount(count);\r\n      \r\n      console.log('[CartContext] Totals updated', { total: itemTotal, itemCount: count });\r\n    };\r\n    \r\n    calculateTotals();\r\n  }, [cartItems]);\r\n\r\n  // Thêm vào giỏ hàng, xử lý cả đã đăng nhập và chưa đăng nhập\r\n  const addToCart = async (product, quantity = 1) => {\r\n    console.log('[CartContext] addToCart - start', { \r\n      productId: product.id, \r\n      productName: product.name, \r\n      quantity,\r\n      isAuthenticated\r\n    });\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (isAuthenticated) {\r\n        // Nếu đã đăng nhập, gọi API để thêm vào giỏ hàng\r\n        console.log('[CartContext] addToCart - calling API (authenticated)');\r\n        await ApiService.addToCart(product.id, quantity);\r\n      } else {\r\n        // Nếu chưa đăng nhập, chỉ lưu vào localStorage\r\n        console.log('[CartContext] addToCart - adding to guest cart (not authenticated)');\r\n        \r\n        // Cập nhật giỏ hàng khách\r\n        setGuestCartItems(prevItems => {\r\n          const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\r\n          \r\n          if (existingItemIndex >= 0) {\r\n            // Cập nhật số lượng nếu sản phẩm đã tồn tại\r\n            const updatedItems = [...prevItems];\r\n            updatedItems[existingItemIndex] = {\r\n              ...updatedItems[existingItemIndex],\r\n              quantity: updatedItems[existingItemIndex].quantity + quantity\r\n            };\r\n            return updatedItems;\r\n          } else {\r\n            // Thêm mới nếu sản phẩm chưa tồn tại\r\n            return [...prevItems, { ...product, quantity }];\r\n          }\r\n        });\r\n      }\r\n      \r\n      // Cập nhật state cartItems (hiển thị cho người dùng)\r\n      setCartItems(prevItems => {\r\n        // Kiểm tra sản phẩm đã tồn tại chưa\r\n        const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\r\n        \r\n        if (existingItemIndex >= 0) {\r\n          // Cập nhật số lượng nếu đã tồn tại\r\n          console.log('[CartContext] addToCart - updating existing item');\r\n          const updatedItems = [...prevItems];\r\n          updatedItems[existingItemIndex] = {\r\n            ...updatedItems[existingItemIndex],\r\n            quantity: updatedItems[existingItemIndex].quantity + quantity\r\n          };\r\n          return updatedItems;\r\n        } else {\r\n          // Thêm mới nếu chưa tồn tại\r\n          console.log('[CartContext] addToCart - adding new item');\r\n          return [...prevItems, { ...product, quantity }];\r\n        }\r\n      });\r\n      \r\n      console.log('[CartContext] addToCart - success');\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('[CartContext] addToCart - error', err);\r\n      setError(err.message || 'Không thể thêm sản phẩm vào giỏ hàng');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Cập nhật số lượng sản phẩm trong giỏ hàng\r\n  const updateCartItemQuantity = async (productId, quantity) => {\r\n    console.log('[CartContext] updateCartItemQuantity', { productId, quantity, isAuthenticated });\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (quantity <= 0) {\r\n        // Nếu số lượng <= 0, xóa sản phẩm khỏi giỏ hàng\r\n        console.log('[CartContext] updateCartItemQuantity - removing item (quantity <= 0)');\r\n        return removeFromCart(productId);\r\n      }\r\n      \r\n      if (isAuthenticated) {\r\n        // Nếu đã đăng nhập, gọi API để cập nhật\r\n        console.log('[CartContext] updateCartItemQuantity - calling API (authenticated)');\r\n        await ApiService.updateCartItem(productId, quantity);\r\n      } else {\r\n        // Nếu chưa đăng nhập, cập nhật giỏ hàng khách\r\n        console.log('[CartContext] updateCartItemQuantity - updating guest cart (not authenticated)');\r\n        setGuestCartItems(prevItems => \r\n          prevItems.map(item => \r\n            item.id === productId ? { ...item, quantity } : item\r\n          )\r\n        );\r\n      }\r\n      \r\n      // Cập nhật state cartItems (hiển thị cho người dùng)\r\n      setCartItems(prevItems => \r\n        prevItems.map(item => \r\n          item.id === productId ? { ...item, quantity } : item\r\n        )\r\n      );\r\n      \r\n      console.log('[CartContext] updateCartItemQuantity - success');\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('[CartContext] updateCartItemQuantity - error', err);\r\n      setError(err.message || 'Không thể cập nhật số lượng sản phẩm');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Xóa sản phẩm khỏi giỏ hàng\r\n  const removeFromCart = async (productId) => {\r\n    console.log('[CartContext] removeFromCart', { productId, isAuthenticated });\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (isAuthenticated) {\r\n        // Nếu đã đăng nhập, gọi API để xóa\r\n        console.log('[CartContext] removeFromCart - calling API (authenticated)');\r\n        await ApiService.removeFromCart(productId);\r\n      } else {\r\n        // Nếu chưa đăng nhập, cập nhật giỏ hàng khách\r\n        console.log('[CartContext] removeFromCart - updating guest cart (not authenticated)');\r\n        setGuestCartItems(prevItems => prevItems.filter(item => item.id !== productId));\r\n      }\r\n      \r\n      // Cập nhật state cartItems (hiển thị cho người dùng)\r\n      setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\r\n      \r\n      console.log('[CartContext] removeFromCart - success');\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('[CartContext] removeFromCart - error', err);\r\n      setError(err.message || 'Không thể xóa sản phẩm khỏi giỏ hàng');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Xóa toàn bộ giỏ hàng\r\n  const clearCart = async () => {\r\n    console.log('[CartContext] clearCart - start', { isAuthenticated });\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      if (isAuthenticated) {\r\n        // Nếu đã đăng nhập, gọi API để xóa\r\n        console.log('[CartContext] clearCart - calling API (authenticated)');\r\n        // Đối với clearCart, chúng ta có thể cần gọi nhiều API để xóa từng sản phẩm\r\n        // hoặc có một API riêng để xóa toàn bộ giỏ hàng\r\n        for (const item of cartItems) {\r\n          await ApiService.removeFromCart(item.id);\r\n        }\r\n      } else {\r\n        // Nếu chưa đăng nhập, xóa giỏ hàng khách\r\n        console.log('[CartContext] clearCart - clearing guest cart (not authenticated)');\r\n        setGuestCartItems([]);\r\n      }\r\n      \r\n      // Xóa state cartItems (hiển thị cho người dùng)\r\n      setCartItems([]);\r\n      \r\n      console.log('[CartContext] clearCart - success');\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('[CartContext] clearCart - error', err);\r\n      setError(err.message || 'Không thể xóa giỏ hàng');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Chuyển từ giỏ hàng khách sang giỏ hàng đã đăng nhập\r\n  const migrateGuestCartToUserCart = async () => {\r\n    console.log('[CartContext] migrateGuestCartToUserCart - start', {\r\n      guestItemCount: guestCartItems.length,\r\n      isAuthenticated\r\n    });\r\n    \r\n    if (!isAuthenticated || guestCartItems.length === 0) {\r\n      console.log('[CartContext] migrateGuestCartToUserCart - skipped (not authenticated or empty guest cart)');\r\n      return;\r\n    }\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // Đồng bộ từng sản phẩm trong giỏ hàng khách lên API\r\n      for (const item of guestCartItems) {\r\n        await ApiService.addToCart(item.id, item.quantity);\r\n      }\r\n      \r\n      // Tải lại giỏ hàng từ API\r\n      const userCart = await ApiService.getCart();\r\n      setCartItems(userCart?.items || []);\r\n      \r\n      // Xóa giỏ hàng khách\r\n      setGuestCartItems([]);\r\n      \r\n      console.log('[CartContext] migrateGuestCartToUserCart - success');\r\n    } catch (err) {\r\n      console.error('[CartContext] migrateGuestCartToUserCart - error', err);\r\n      setError('Không thể chuyển giỏ hàng. Vui lòng thử lại sau.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    cart: {\r\n      items: cartItems,\r\n      total,\r\n      itemCount,\r\n    },\r\n    loading,\r\n    error,\r\n    addToCart,\r\n    updateCartItemQuantity,\r\n    removeFromCart,\r\n    clearCart,\r\n    migrateGuestCartToUserCart,\r\n    isAuthenticated\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}