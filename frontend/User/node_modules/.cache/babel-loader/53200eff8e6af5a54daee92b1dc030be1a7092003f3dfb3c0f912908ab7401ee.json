{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useLocalStorage = (key, initialValue) => {\n  _s();\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that\n  // persists the new value to localStorage.\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  // Listen for changes to this localStorage key from other windows\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === key) {\n        try {\n          setStoredValue(e.newValue ? JSON.parse(e.newValue) : initialValue);\n        } catch (error) {\n          console.error(`Error parsing localStorage value for key \"${key}\":`, error);\n        }\n      }\n    };\n\n    // Listen for storage events\n    window.addEventListener('storage', handleStorageChange);\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, [key, initialValue]);\n  return [storedValue, setValue];\n};\n_s(useLocalStorage, \"pD3ljQwMzI2Pjo4uDZMwf/5MfmY=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","storedValue","setStoredValue","item","window","localStorage","getItem","JSON","parse","error","console","setValue","value","valueToStore","Function","setItem","stringify","handleStorageChange","e","newValue","addEventListener","removeEventListener"],"sources":["C:/Users/GIGABYTE/Documents/phone_selling_app/frontend/User/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useLocalStorage = (key, initialValue) => {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.error(`Error reading localStorage key \"${key}\":`, error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that\r\n  // persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.error(`Error setting localStorage key \"${key}\":`, error);\r\n    }\r\n  };\r\n\r\n  // Listen for changes to this localStorage key from other windows\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === key) {\r\n        try {\r\n          setStoredValue(e.newValue ? JSON.parse(e.newValue) : initialValue);\r\n        } catch (error) {\r\n          console.error(`Error parsing localStorage value for key \"${key}\":`, error);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Listen for storage events\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => {\r\n      window.removeEventListener('storage', handleStorageChange);\r\n    };\r\n  }, [key, initialValue]);\r\n\r\n  return [storedValue, setValue];\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,eAAe,GAAGA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAAC,EAAA;EACpD;EACA;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,MAAM;IACnD,IAAI;MACF;MACA,MAAMQ,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C;MACA,OAAOK,IAAI,GAAGI,IAAI,CAACC,KAAK,CAACL,IAAI,CAAC,GAAGJ,YAAY;IAC/C,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;MAChE,OAAOV,YAAY;IACrB;EACF,CAAC,CAAC;;EAEF;EACA;EACA,MAAMY,QAAQ,GAAIC,KAAK,IAAK;IAC1B,IAAI;MACF;MACA,MAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAQ,GAAGF,KAAK,CAACX,WAAW,CAAC,GAAGW,KAAK;MACxD;MACAV,cAAc,CAACW,YAAY,CAAC;MAC5B;MACAT,MAAM,CAACC,YAAY,CAACU,OAAO,CAACjB,GAAG,EAAES,IAAI,CAACS,SAAS,CAACH,YAAY,CAAC,CAAC;IAChE,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,mCAAmCX,GAAG,IAAI,EAAEW,KAAK,CAAC;IAClE;EACF,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACd,MAAMqB,mBAAmB,GAAIC,CAAC,IAAK;MACjC,IAAIA,CAAC,CAACpB,GAAG,KAAKA,GAAG,EAAE;QACjB,IAAI;UACFI,cAAc,CAACgB,CAAC,CAACC,QAAQ,GAAGZ,IAAI,CAACC,KAAK,CAACU,CAAC,CAACC,QAAQ,CAAC,GAAGpB,YAAY,CAAC;QACpE,CAAC,CAAC,OAAOU,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6CAA6CX,GAAG,IAAI,EAAEW,KAAK,CAAC;QAC5E;MACF;IACF,CAAC;;IAED;IACAL,MAAM,CAACgB,gBAAgB,CAAC,SAAS,EAAEH,mBAAmB,CAAC;IACvD,OAAO,MAAM;MACXb,MAAM,CAACiB,mBAAmB,CAAC,SAAS,EAAEJ,mBAAmB,CAAC;IAC5D,CAAC;EACH,CAAC,EAAE,CAACnB,GAAG,EAAEC,YAAY,CAAC,CAAC;EAEvB,OAAO,CAACE,WAAW,EAAEU,QAAQ,CAAC;AAChC,CAAC;AAACX,EAAA,CArDWH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}