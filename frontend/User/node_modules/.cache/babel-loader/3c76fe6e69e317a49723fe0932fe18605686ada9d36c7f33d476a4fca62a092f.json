{"ast":null,"code":"import axios from 'axios';\n\n// API base URL - this would be replaced with your actual API URL\nconst API_BASE_URL = 'https://api.phonesellingapp.com/api';\n\n// Create an axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for auth token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  // Handle 401 Unauthorized errors\n  if (error.response && error.response.status === 401) {\n    // Clear local storage and redirect to login\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// For demo purposes, we'll add some mock data\nconst mockBanners = [{\n  id: 1,\n  title: 'iPhone 15 Pro Max Mới',\n  imageUrl: '/assets/images/banners/iphone-15-pro-max.jpg',\n  link: '/product/iphone-15-pro-max',\n  categoryId: 'phone',\n  placeId: 'home'\n}, {\n  id: 2,\n  title: 'Samsung Galaxy S24 Ultra',\n  imageUrl: '/assets/images/banners/samsung-galaxy-s24.jpg',\n  link: '/product/samsung-galaxy-s24-ultra',\n  categoryId: 'phone',\n  placeId: 'home'\n}, {\n  id: 3,\n  title: 'Laptop Gaming Asus ROG',\n  imageUrl: '/assets/images/banners/asus-rog.jpg',\n  link: '/product/asus-rog-strix-g16',\n  categoryId: 'laptop',\n  placeId: 'home'\n}];\nconst mockCategories = [{\n  id: 'phone',\n  name: 'Điện thoại',\n  icon: 'fa-mobile-alt',\n  path: '/phone'\n}, {\n  id: 'laptop',\n  name: 'Laptop',\n  icon: 'fa-laptop',\n  path: '/laptop'\n}, {\n  id: 'tablet',\n  name: 'Máy tính bảng',\n  icon: 'fa-tablet-alt',\n  path: '/tablet'\n}, {\n  id: 'smartwatch',\n  name: 'Đồng hồ thông minh',\n  icon: 'fa-clock',\n  path: '/smartwatch'\n}, {\n  id: 'accessories',\n  name: 'Phụ kiện',\n  icon: 'fa-headphones',\n  path: '/accessory'\n}, {\n  id: 'watch',\n  name: 'Đồng hồ',\n  icon: 'fa-stopwatch',\n  path: '/watch'\n}, {\n  id: 'pc',\n  name: 'PC, Máy in',\n  icon: 'fa-desktop',\n  path: '/pc'\n}];\nconst mockPriceRange = {\n  min: 1000000,\n  max: 50000000,\n  steps: [1000000, 3000000, 7000000, 10000000, 15000000, 25000000, 50000000]\n};\nconst mockProducts = [{\n  id: 1,\n  name: 'iPhone 15 Pro Max',\n  price: 34990000,\n  discountPrice: 32990000,\n  imageUrl: '/assets/images/products/iphone-15-pro-max.jpg',\n  categoryId: 'phone',\n  brandId: 'apple',\n  rating: 4.9,\n  reviewCount: 120,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '6.7 inches, Super Retina XDR OLED',\n    cpu: 'Apple A17 Pro',\n    ram: '8GB',\n    storage: '256GB',\n    camera: 'Triple 48MP + 12MP + 12MP',\n    battery: '4422mAh'\n  }\n}, {\n  id: 2,\n  name: 'Samsung Galaxy S24 Ultra',\n  price: 31990000,\n  discountPrice: 29990000,\n  imageUrl: '/assets/images/products/samsung-galaxy-s24.jpg',\n  categoryId: 'phone',\n  brandId: 'samsung',\n  rating: 4.8,\n  reviewCount: 95,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '6.8 inches, Dynamic AMOLED 2X',\n    cpu: 'Snapdragon 8 Gen 3',\n    ram: '12GB',\n    storage: '256GB',\n    camera: 'Quad 200MP + 12MP + 50MP + 10MP',\n    battery: '5000mAh'\n  }\n}, {\n  id: 3,\n  name: 'Xiaomi 14 Pro',\n  price: 19990000,\n  discountPrice: 18490000,\n  imageUrl: '/assets/images/products/xiaomi-14-pro.jpg',\n  categoryId: 'phone',\n  brandId: 'xiaomi',\n  rating: 4.6,\n  reviewCount: 78,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '6.73 inches, AMOLED',\n    cpu: 'Snapdragon 8 Gen 3',\n    ram: '12GB',\n    storage: '256GB',\n    camera: 'Triple 50MP + 50MP + 50MP',\n    battery: '4880mAh'\n  }\n}, {\n  id: 4,\n  name: 'OPPO Find X7 Ultra',\n  price: 24990000,\n  discountPrice: 23990000,\n  imageUrl: '/assets/images/products/oppo-find-x7.jpg',\n  categoryId: 'phone',\n  brandId: 'oppo',\n  rating: 4.7,\n  reviewCount: 64,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '6.82 inches, AMOLED',\n    cpu: 'Dimensity 9300',\n    ram: '16GB',\n    storage: '512GB',\n    camera: 'Quad 50MP + 50MP + 50MP + 50MP',\n    battery: '5150mAh'\n  }\n}, {\n  id: 5,\n  name: 'MacBook Pro 16 M3 Max',\n  price: 85990000,\n  discountPrice: null,\n  imageUrl: '/assets/images/products/macbook-pro-16.jpg',\n  categoryId: 'laptop',\n  brandId: 'apple',\n  rating: 4.9,\n  reviewCount: 45,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '16.2 inches, Liquid Retina XDR',\n    cpu: 'Apple M3 Max',\n    ram: '64GB',\n    storage: '1TB SSD',\n    gpu: 'Apple GPU 40-core',\n    battery: 'Up to 22 hours'\n  }\n}, {\n  id: 6,\n  name: 'Asus ROG Strix G16',\n  price: 45990000,\n  discountPrice: 42990000,\n  imageUrl: '/assets/images/products/asus-rog-strix.jpg',\n  categoryId: 'laptop',\n  brandId: 'asus',\n  rating: 4.7,\n  reviewCount: 36,\n  stockStatus: 'in_stock',\n  specifications: {\n    screen: '16 inches, QHD 240Hz',\n    cpu: 'Intel Core i9-14900H',\n    ram: '32GB',\n    storage: '1TB SSD',\n    gpu: 'NVIDIA RTX 4080',\n    battery: '90Whr'\n  }\n}];\n\n// Thêm mock data cho cart\nconst mockCart = {\n  items: [{\n    productId: 1,\n    quantity: 2,\n    product: mockProducts[0]\n  }, {\n    productId: 2,\n    quantity: 1,\n    product: mockProducts[1]\n  }],\n  total: 95970000\n};\n\n// Thêm mock data cho orders\nconst mockOrders = [{\n  id: 1,\n  orderNumber: \"ORD001\",\n  date: \"2024-02-20\",\n  status: \"delivered\",\n  items: [mockProducts[0]],\n  total: 32990000,\n  shippingAddress: \"123 Đường ABC, Quận 1, TP.HCM\"\n}, {\n  id: 2,\n  orderNumber: \"ORD002\",\n  date: \"2024-02-21\",\n  status: \"processing\",\n  items: [mockProducts[1], mockProducts[2]],\n  total: 48480000,\n  shippingAddress: \"456 Đường XYZ, Quận 2, TP.HCM\"\n}];\n\n// API Service class\nexport class ApiService {\n  // Banners\n  static async fetchBanners() {\n    try {\n      // For demo, return mock data\n      // In production, uncomment the following:\n      // const response = await apiClient.get('/banners');\n      // return response.data;\n\n      return mockBanners;\n    } catch (error) {\n      console.error('Error fetching banners:', error);\n      throw error;\n    }\n  }\n\n  // Categories\n  static async fetchCategories() {\n    try {\n      // For demo, return mock data\n      // In production, uncomment the following:\n      // const response = await apiClient.get('/categories');\n      // return response.data;\n\n      return mockCategories;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      throw error;\n    }\n  }\n\n  // Products\n  static async fetchProducts(filters = {}) {\n    try {\n      // For demo, return mock data with filtering\n      // In production, uncomment the following:\n      // const response = await apiClient.get('/products', { params: filters });\n      // return response.data;\n\n      let filteredProducts = [...mockProducts];\n\n      // Apply category filter\n      if (filters.category) {\n        filteredProducts = filteredProducts.filter(p => p.categoryId === filters.category);\n      }\n\n      // Apply brand filter\n      if (filters.brand) {\n        filteredProducts = filteredProducts.filter(p => p.brandId === filters.brand);\n      }\n\n      // Apply price filter\n      if (filters.minPrice) {\n        filteredProducts = filteredProducts.filter(p => (p.discountPrice || p.price) >= filters.minPrice);\n      }\n      if (filters.maxPrice) {\n        filteredProducts = filteredProducts.filter(p => (p.discountPrice || p.price) <= filters.maxPrice);\n      }\n\n      // Apply search filter\n      if (filters.search) {\n        const searchTerm = filters.search.toLowerCase();\n        filteredProducts = filteredProducts.filter(p => p.name.toLowerCase().includes(searchTerm) || p.categoryId.toLowerCase().includes(searchTerm) || p.brandId.toLowerCase().includes(searchTerm));\n      }\n      return filteredProducts;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  }\n\n  // Product detail\n  static async fetchProductById(productId) {\n    try {\n      // For demo, return mock data\n      // In production, uncomment the following:\n      // const response = await apiClient.get(`/products/${productId}`);\n      // return response.data;\n\n      const product = mockProducts.find(p => p.id === parseInt(productId, 10));\n      if (!product) {\n        throw new Error('Product not found');\n      }\n      return product;\n    } catch (error) {\n      console.error(`Error fetching product ${productId}:`, error);\n      throw error;\n    }\n  }\n\n  // Price range\n  static async fetchPriceRange() {\n    try {\n      // For demo, return mock data\n      // In production, uncomment the following:\n      // const response = await apiClient.get('/price-range');\n      // return response.data;\n\n      return mockPriceRange;\n    } catch (error) {\n      console.error('Error fetching price range:', error);\n      throw error;\n    }\n  }\n\n  // Search\n  static async searchProducts(query) {\n    try {\n      // For demo, return mock data\n      // In production, uncomment the following:\n      // const response = await apiClient.get('/search', { params: { q: query } });\n      // return response.data;\n\n      return this.fetchProducts({\n        search: query\n      });\n    } catch (error) {\n      console.error('Error searching products:', error);\n      throw error;\n    }\n  }\n\n  // Fetch Hot Phones\n  static async fetchHotPhones() {\n    try {\n      // Gọi API endpoint với params mặc định\n      const response = await apiClient.get('/api/v1/search', {\n        params: {\n          page: 1,\n          size: 10,\n          categoryId: 2 // Tương ứng với danh mục điện thoại\n        }\n      });\n\n      // Nếu đang sử dụng dữ liệu mẫu, trả về điện thoại từ mockProducts\n      if (!response || !response.data) {\n        return mockProducts.filter(p => p.categoryId === 'phone').slice(0, 10);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching hot phones:', error);\n      // Fallback to mock data on error\n      return mockProducts.filter(p => p.categoryId === 'phone').slice(0, 10);\n    }\n  }\n\n  // Cart methods\n  static async getCart() {\n    try {\n      // Trong production sẽ gọi API thật\n      // const response = await apiClient.get('/cart');\n      // return response.data;\n      return mockCart;\n    } catch (error) {\n      console.error('Error getting cart:', error);\n      throw error;\n    }\n  }\n  static async updateCartItem(productId, quantity) {\n    try {\n      // const response = await apiClient.put(`/cart/${productId}`, { quantity });\n      // return response.data;\n      return {\n        success: true,\n        message: 'Cart updated successfully'\n      };\n    } catch (error) {\n      console.error('Error updating cart:', error);\n      throw error;\n    }\n  }\n  static async addToCart(productId, quantity = 1) {\n    try {\n      // Trong production, sẽ gọi API thật\n      // const response = await apiClient.post('/cart', { productId, quantity });\n      // return response.data;\n\n      console.log(`Added product ${productId} to cart with quantity ${quantity}`);\n      return {\n        success: true,\n        message: 'Product added to cart successfully'\n      };\n    } catch (error) {\n      console.error('Error adding to cart:', error);\n      throw error;\n    }\n  }\n\n  // Order methods\n  static async getOrders() {\n    try {\n      // const response = await apiClient.get('/orders');\n      // return response.data;\n      return mockOrders;\n    } catch (error) {\n      console.error('Error getting orders:', error);\n      throw error;\n    }\n  }\n  static async getOrderById(orderId) {\n    try {\n      // const response = await apiClient.get(`/orders/${orderId}`);\n      // return response.data;\n      return mockOrders.find(order => order.id === orderId);\n    } catch (error) {\n      console.error('Error getting order:', error);\n      throw error;\n    }\n  }\n  static async createOrder(orderData) {\n    try {\n      // const response = await apiClient.post('/orders', orderData);\n      // return response.data;\n      return {\n        success: true,\n        orderId: Date.now(),\n        message: 'Order created successfully'\n      };\n    } catch (error) {\n      console.error('Error creating order:', error);\n      throw error;\n    }\n  }\n\n  // Authentication\n  static async login(email, password) {\n    try {\n      // For demo, uncomment in production:\n      // const response = await apiClient.post('/auth/login', { email, password });\n      // const { token, user } = response.data;\n      // localStorage.setItem('authToken', token);\n      // localStorage.setItem('user', JSON.stringify(user));\n      // return user;\n\n      // Mock login for demo\n      if (email === 'demo@example.com' && password === 'password') {\n        const mockUser = {\n          id: 1,\n          name: 'Demo User',\n          email: 'demo@example.com',\n          phone: '0123456789'\n        };\n        const mockToken = 'mock-jwt-token';\n        localStorage.setItem('authToken', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockUser));\n        return mockUser;\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n  static async register(userData) {\n    try {\n      // For demo, uncomment in production:\n      // const response = await apiClient.post('/auth/register', userData);\n      // return response.data;\n\n      // Mock register for demo\n      return {\n        success: true,\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n  static async logout() {\n    // For demo, uncomment in production:\n    // await apiClient.post('/auth/logout');\n\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n    return {\n      success: true\n    };\n  }\n\n  // User profile\n  static async fetchUserProfile() {\n    try {\n      // For demo, uncomment in production:\n      // const response = await apiClient.get('/user/profile');\n      // return response.data;\n\n      // Mock user profile for demo\n      const user = JSON.parse(localStorage.getItem('user'));\n      if (!user) {\n        throw new Error('User not authenticated');\n      }\n      return user;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  }\n  static async updateUserProfile(userData) {\n    try {\n      // For demo, uncomment in production:\n      // const response = await apiClient.put('/user/profile', userData);\n      // return response.data;\n\n      // Mock update for demo\n      const currentUser = JSON.parse(localStorage.getItem('user'));\n      const updatedUser = {\n        ...currentUser,\n        ...userData\n      };\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return updatedUser;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","mockBanners","id","title","imageUrl","link","categoryId","placeId","mockCategories","name","icon","path","mockPriceRange","min","max","steps","mockProducts","price","discountPrice","brandId","rating","reviewCount","stockStatus","specifications","screen","cpu","ram","storage","camera","battery","gpu","mockCart","items","productId","quantity","product","total","mockOrders","orderNumber","date","shippingAddress","ApiService","fetchBanners","console","fetchCategories","fetchProducts","filters","filteredProducts","category","filter","p","brand","minPrice","maxPrice","search","searchTerm","toLowerCase","includes","fetchProductById","find","parseInt","Error","fetchPriceRange","searchProducts","query","fetchHotPhones","get","params","page","size","data","slice","getCart","updateCartItem","success","message","addToCart","log","getOrders","getOrderById","orderId","order","createOrder","orderData","Date","now","login","email","password","mockUser","phone","mockToken","setItem","JSON","stringify","register","userData","logout","fetchUserProfile","user","parse","updateUserProfile","currentUser","updatedUser"],"sources":["C:/Users/GIGABYTE/Documents/phone_selling_app/frontend/User/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API base URL - this would be replaced with your actual API URL\r\nconst API_BASE_URL = 'https://api.phonesellingapp.com/api';\r\n\r\n// Create an axios instance\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for auth token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for error handling\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    // Handle 401 Unauthorized errors\r\n    if (error.response && error.response.status === 401) {\r\n      // Clear local storage and redirect to login\r\n      localStorage.removeItem('authToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// For demo purposes, we'll add some mock data\r\nconst mockBanners = [\r\n  {\r\n    id: 1,\r\n    title: 'iPhone 15 Pro Max Mới',\r\n    imageUrl: '/assets/images/banners/iphone-15-pro-max.jpg',\r\n    link: '/product/iphone-15-pro-max',\r\n    categoryId: 'phone',\r\n    placeId: 'home'\r\n  },\r\n  {\r\n    id: 2,\r\n    title: 'Samsung Galaxy S24 Ultra',\r\n    imageUrl: '/assets/images/banners/samsung-galaxy-s24.jpg',\r\n    link: '/product/samsung-galaxy-s24-ultra',\r\n    categoryId: 'phone',\r\n    placeId: 'home'\r\n  },\r\n  {\r\n    id: 3,\r\n    title: 'Laptop Gaming Asus ROG',\r\n    imageUrl: '/assets/images/banners/asus-rog.jpg',\r\n    link: '/product/asus-rog-strix-g16',\r\n    categoryId: 'laptop',\r\n    placeId: 'home'\r\n  }\r\n];\r\n\r\nconst mockCategories = [\r\n  { id: 'phone', name: 'Điện thoại', icon: 'fa-mobile-alt', path: '/phone' },\r\n  { id: 'laptop', name: 'Laptop', icon: 'fa-laptop', path: '/laptop' },\r\n  { id: 'tablet', name: 'Máy tính bảng', icon: 'fa-tablet-alt', path: '/tablet' },\r\n  { id: 'smartwatch', name: 'Đồng hồ thông minh', icon: 'fa-clock', path: '/smartwatch' },\r\n  { id: 'accessories', name: 'Phụ kiện', icon: 'fa-headphones', path: '/accessory' },\r\n  { id: 'watch', name: 'Đồng hồ', icon: 'fa-stopwatch', path: '/watch' },\r\n  { id: 'pc', name: 'PC, Máy in', icon: 'fa-desktop', path: '/pc' },\r\n];\r\n\r\nconst mockPriceRange = {\r\n  min: 1000000,\r\n  max: 50000000,\r\n  steps: [1000000, 3000000, 7000000, 10000000, 15000000, 25000000, 50000000]\r\n};\r\n\r\nconst mockProducts = [\r\n  {\r\n    id: 1,\r\n    name: 'iPhone 15 Pro Max',\r\n    price: 34990000,\r\n    discountPrice: 32990000,\r\n    imageUrl: '/assets/images/products/iphone-15-pro-max.jpg',\r\n    categoryId: 'phone',\r\n    brandId: 'apple',\r\n    rating: 4.9,\r\n    reviewCount: 120,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '6.7 inches, Super Retina XDR OLED',\r\n      cpu: 'Apple A17 Pro',\r\n      ram: '8GB',\r\n      storage: '256GB',\r\n      camera: 'Triple 48MP + 12MP + 12MP',\r\n      battery: '4422mAh'\r\n    }\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Samsung Galaxy S24 Ultra',\r\n    price: 31990000,\r\n    discountPrice: 29990000,\r\n    imageUrl: '/assets/images/products/samsung-galaxy-s24.jpg',\r\n    categoryId: 'phone',\r\n    brandId: 'samsung',\r\n    rating: 4.8,\r\n    reviewCount: 95,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '6.8 inches, Dynamic AMOLED 2X',\r\n      cpu: 'Snapdragon 8 Gen 3',\r\n      ram: '12GB',\r\n      storage: '256GB',\r\n      camera: 'Quad 200MP + 12MP + 50MP + 10MP',\r\n      battery: '5000mAh'\r\n    }\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Xiaomi 14 Pro',\r\n    price: 19990000,\r\n    discountPrice: 18490000,\r\n    imageUrl: '/assets/images/products/xiaomi-14-pro.jpg',\r\n    categoryId: 'phone',\r\n    brandId: 'xiaomi',\r\n    rating: 4.6,\r\n    reviewCount: 78,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '6.73 inches, AMOLED',\r\n      cpu: 'Snapdragon 8 Gen 3',\r\n      ram: '12GB',\r\n      storage: '256GB',\r\n      camera: 'Triple 50MP + 50MP + 50MP',\r\n      battery: '4880mAh'\r\n    }\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'OPPO Find X7 Ultra',\r\n    price: 24990000,\r\n    discountPrice: 23990000,\r\n    imageUrl: '/assets/images/products/oppo-find-x7.jpg',\r\n    categoryId: 'phone',\r\n    brandId: 'oppo',\r\n    rating: 4.7,\r\n    reviewCount: 64,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '6.82 inches, AMOLED',\r\n      cpu: 'Dimensity 9300',\r\n      ram: '16GB',\r\n      storage: '512GB',\r\n      camera: 'Quad 50MP + 50MP + 50MP + 50MP',\r\n      battery: '5150mAh'\r\n    }\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'MacBook Pro 16 M3 Max',\r\n    price: 85990000,\r\n    discountPrice: null,\r\n    imageUrl: '/assets/images/products/macbook-pro-16.jpg',\r\n    categoryId: 'laptop',\r\n    brandId: 'apple',\r\n    rating: 4.9,\r\n    reviewCount: 45,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '16.2 inches, Liquid Retina XDR',\r\n      cpu: 'Apple M3 Max',\r\n      ram: '64GB',\r\n      storage: '1TB SSD',\r\n      gpu: 'Apple GPU 40-core',\r\n      battery: 'Up to 22 hours'\r\n    }\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Asus ROG Strix G16',\r\n    price: 45990000,\r\n    discountPrice: 42990000,\r\n    imageUrl: '/assets/images/products/asus-rog-strix.jpg',\r\n    categoryId: 'laptop',\r\n    brandId: 'asus',\r\n    rating: 4.7,\r\n    reviewCount: 36,\r\n    stockStatus: 'in_stock',\r\n    specifications: {\r\n      screen: '16 inches, QHD 240Hz',\r\n      cpu: 'Intel Core i9-14900H',\r\n      ram: '32GB',\r\n      storage: '1TB SSD',\r\n      gpu: 'NVIDIA RTX 4080',\r\n      battery: '90Whr'\r\n    }\r\n  }\r\n];\r\n\r\n// Thêm mock data cho cart\r\nconst mockCart = {\r\n  items: [\r\n    {\r\n      productId: 1,\r\n      quantity: 2,\r\n      product: mockProducts[0]\r\n    },\r\n    {\r\n      productId: 2,\r\n      quantity: 1,\r\n      product: mockProducts[1]\r\n    }\r\n  ],\r\n  total: 95970000\r\n};\r\n\r\n// Thêm mock data cho orders\r\nconst mockOrders = [\r\n  {\r\n    id: 1,\r\n    orderNumber: \"ORD001\",\r\n    date: \"2024-02-20\",\r\n    status: \"delivered\",\r\n    items: [mockProducts[0]],\r\n    total: 32990000,\r\n    shippingAddress: \"123 Đường ABC, Quận 1, TP.HCM\"\r\n  },\r\n  {\r\n    id: 2, \r\n    orderNumber: \"ORD002\",\r\n    date: \"2024-02-21\",\r\n    status: \"processing\",\r\n    items: [mockProducts[1], mockProducts[2]],\r\n    total: 48480000,\r\n    shippingAddress: \"456 Đường XYZ, Quận 2, TP.HCM\"\r\n  }\r\n];\r\n\r\n// API Service class\r\nexport class ApiService {\r\n  // Banners\r\n  static async fetchBanners() {\r\n    try {\r\n      // For demo, return mock data\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get('/banners');\r\n      // return response.data;\r\n      \r\n      return mockBanners;\r\n    } catch (error) {\r\n      console.error('Error fetching banners:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Categories\r\n  static async fetchCategories() {\r\n    try {\r\n      // For demo, return mock data\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get('/categories');\r\n      // return response.data;\r\n      \r\n      return mockCategories;\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Products\r\n  static async fetchProducts(filters = {}) {\r\n    try {\r\n      // For demo, return mock data with filtering\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get('/products', { params: filters });\r\n      // return response.data;\r\n      \r\n      let filteredProducts = [...mockProducts];\r\n      \r\n      // Apply category filter\r\n      if (filters.category) {\r\n        filteredProducts = filteredProducts.filter(p => p.categoryId === filters.category);\r\n      }\r\n      \r\n      // Apply brand filter\r\n      if (filters.brand) {\r\n        filteredProducts = filteredProducts.filter(p => p.brandId === filters.brand);\r\n      }\r\n      \r\n      // Apply price filter\r\n      if (filters.minPrice) {\r\n        filteredProducts = filteredProducts.filter(p => (p.discountPrice || p.price) >= filters.minPrice);\r\n      }\r\n      \r\n      if (filters.maxPrice) {\r\n        filteredProducts = filteredProducts.filter(p => (p.discountPrice || p.price) <= filters.maxPrice);\r\n      }\r\n      \r\n      // Apply search filter\r\n      if (filters.search) {\r\n        const searchTerm = filters.search.toLowerCase();\r\n        filteredProducts = filteredProducts.filter(p => \r\n          p.name.toLowerCase().includes(searchTerm) || \r\n          p.categoryId.toLowerCase().includes(searchTerm) ||\r\n          p.brandId.toLowerCase().includes(searchTerm)\r\n        );\r\n      }\r\n      \r\n      return filteredProducts;\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Product detail\r\n  static async fetchProductById(productId) {\r\n    try {\r\n      // For demo, return mock data\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get(`/products/${productId}`);\r\n      // return response.data;\r\n      \r\n      const product = mockProducts.find(p => p.id === parseInt(productId, 10));\r\n      if (!product) {\r\n        throw new Error('Product not found');\r\n      }\r\n      return product;\r\n    } catch (error) {\r\n      console.error(`Error fetching product ${productId}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Price range\r\n  static async fetchPriceRange() {\r\n    try {\r\n      // For demo, return mock data\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get('/price-range');\r\n      // return response.data;\r\n      \r\n      return mockPriceRange;\r\n    } catch (error) {\r\n      console.error('Error fetching price range:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search\r\n  static async searchProducts(query) {\r\n    try {\r\n      // For demo, return mock data\r\n      // In production, uncomment the following:\r\n      // const response = await apiClient.get('/search', { params: { q: query } });\r\n      // return response.data;\r\n      \r\n      return this.fetchProducts({ search: query });\r\n    } catch (error) {\r\n      console.error('Error searching products:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Fetch Hot Phones\r\n  static async fetchHotPhones() {\r\n    try {\r\n      // Gọi API endpoint với params mặc định\r\n      const response = await apiClient.get('/api/v1/search', { \r\n        params: { \r\n          page: 1, \r\n          size: 10, \r\n          categoryId: 2 // Tương ứng với danh mục điện thoại\r\n        } \r\n      });\r\n      \r\n      // Nếu đang sử dụng dữ liệu mẫu, trả về điện thoại từ mockProducts\r\n      if (!response || !response.data) {\r\n        return mockProducts\r\n          .filter(p => p.categoryId === 'phone')\r\n          .slice(0, 10);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching hot phones:', error);\r\n      // Fallback to mock data on error\r\n      return mockProducts\r\n        .filter(p => p.categoryId === 'phone')\r\n        .slice(0, 10);\r\n    }\r\n  }\r\n\r\n  // Cart methods\r\n  static async getCart() {\r\n    try {\r\n      // Trong production sẽ gọi API thật\r\n      // const response = await apiClient.get('/cart');\r\n      // return response.data;\r\n      return mockCart;\r\n    } catch (error) {\r\n      console.error('Error getting cart:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateCartItem(productId, quantity) {\r\n    try {\r\n      // const response = await apiClient.put(`/cart/${productId}`, { quantity });\r\n      // return response.data;\r\n      return {\r\n        success: true,\r\n        message: 'Cart updated successfully'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error updating cart:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async addToCart(productId, quantity = 1) {\r\n    try {\r\n      // Trong production, sẽ gọi API thật\r\n      // const response = await apiClient.post('/cart', { productId, quantity });\r\n      // return response.data;\r\n      \r\n      console.log(`Added product ${productId} to cart with quantity ${quantity}`);\r\n      return {\r\n        success: true,\r\n        message: 'Product added to cart successfully'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error adding to cart:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Order methods\r\n  static async getOrders() {\r\n    try {\r\n      // const response = await apiClient.get('/orders');\r\n      // return response.data;\r\n      return mockOrders;\r\n    } catch (error) {\r\n      console.error('Error getting orders:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async getOrderById(orderId) {\r\n    try {\r\n      // const response = await apiClient.get(`/orders/${orderId}`);\r\n      // return response.data;\r\n      return mockOrders.find(order => order.id === orderId);\r\n    } catch (error) {\r\n      console.error('Error getting order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createOrder(orderData) {\r\n    try {\r\n      // const response = await apiClient.post('/orders', orderData);\r\n      // return response.data;\r\n      return {\r\n        success: true,\r\n        orderId: Date.now(),\r\n        message: 'Order created successfully'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication\r\n  static async login(email, password) {\r\n    try {\r\n      // For demo, uncomment in production:\r\n      // const response = await apiClient.post('/auth/login', { email, password });\r\n      // const { token, user } = response.data;\r\n      // localStorage.setItem('authToken', token);\r\n      // localStorage.setItem('user', JSON.stringify(user));\r\n      // return user;\r\n      \r\n      // Mock login for demo\r\n      if (email === 'demo@example.com' && password === 'password') {\r\n        const mockUser = {\r\n          id: 1,\r\n          name: 'Demo User',\r\n          email: 'demo@example.com',\r\n          phone: '0123456789',\r\n        };\r\n        const mockToken = 'mock-jwt-token';\r\n        \r\n        localStorage.setItem('authToken', mockToken);\r\n        localStorage.setItem('user', JSON.stringify(mockUser));\r\n        \r\n        return mockUser;\r\n      } else {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async register(userData) {\r\n    try {\r\n      // For demo, uncomment in production:\r\n      // const response = await apiClient.post('/auth/register', userData);\r\n      // return response.data;\r\n      \r\n      // Mock register for demo\r\n      return { success: true, message: 'Registration successful' };\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async logout() {\r\n    // For demo, uncomment in production:\r\n    // await apiClient.post('/auth/logout');\r\n    \r\n    localStorage.removeItem('authToken');\r\n    localStorage.removeItem('user');\r\n    return { success: true };\r\n  }\r\n\r\n  // User profile\r\n  static async fetchUserProfile() {\r\n    try {\r\n      // For demo, uncomment in production:\r\n      // const response = await apiClient.get('/user/profile');\r\n      // return response.data;\r\n      \r\n      // Mock user profile for demo\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      if (!user) {\r\n        throw new Error('User not authenticated');\r\n      }\r\n      return user;\r\n    } catch (error) {\r\n      console.error('Error fetching user profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async updateUserProfile(userData) {\r\n    try {\r\n      // For demo, uncomment in production:\r\n      // const response = await apiClient.put('/user/profile', userData);\r\n      // return response.data;\r\n      \r\n      // Mock update for demo\r\n      const currentUser = JSON.parse(localStorage.getItem('user'));\r\n      const updatedUser = { ...currentUser, ...userData };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      \r\n      return updatedUser;\r\n    } catch (error) {\r\n      console.error('Error updating user profile:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}