{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GIGABYTE\\\\Documents\\\\phone_selling_app\\\\frontend\\\\User\\\\src\\\\contexts\\\\CartContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useLocalStorage } from '../hooks/useLocalStorage';\nimport { ApiService } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport const CartProvider = ({\n  children\n}) => {\n  _s();\n  const [cartItems, setCartItems] = useLocalStorage('cartItems', []);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [total, setTotal] = useState(0);\n  const [itemCount, setItemCount] = useState(0);\n\n  // Calculate totals whenever cart items change\n  useEffect(() => {\n    const calculateTotals = () => {\n      const itemTotal = cartItems.reduce((total, item) => {\n        const price = item.discountPrice || item.price;\n        return total + price * item.quantity;\n      }, 0);\n      const count = cartItems.reduce((count, item) => count + item.quantity, 0);\n      setTotal(itemTotal);\n      setItemCount(count);\n    };\n    calculateTotals();\n  }, [cartItems]);\n  const addToCart = async (product, quantity = 1) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // Call API (in a real app)\n      await ApiService.addToCart(product.id, quantity);\n\n      // Update local state\n      setCartItems(prevItems => {\n        // Check if the product is already in the cart\n        const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\n        if (existingItemIndex >= 0) {\n          // Product exists, update quantity\n          const updatedItems = [...prevItems];\n          updatedItems[existingItemIndex] = {\n            ...updatedItems[existingItemIndex],\n            quantity: updatedItems[existingItemIndex].quantity + quantity\n          };\n          return updatedItems;\n        } else {\n          // Product doesn't exist, add new item\n          return [...prevItems, {\n            ...product,\n            quantity\n          }];\n        }\n      });\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Add to cart error:', err);\n      setError(err.message || 'Failed to add item to cart');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateCartItemQuantity = (productId, quantity) => {\n    setLoading(true);\n    try {\n      if (quantity <= 0) {\n        // If quantity is zero or negative, remove the item\n        removeFromCart(productId);\n      } else {\n        // Update quantity\n        setCartItems(prevItems => prevItems.map(item => item.id === productId ? {\n          ...item,\n          quantity\n        } : item));\n      }\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Update cart quantity error:', err);\n      setError(err.message || 'Failed to update cart');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const removeFromCart = productId => {\n    setLoading(true);\n    try {\n      setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Remove from cart error:', err);\n      setError(err.message || 'Failed to remove item from cart');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const clearCart = () => {\n    setLoading(true);\n    try {\n      setCartItems([]);\n      return {\n        success: true\n      };\n    } catch (err) {\n      console.error('Clear cart error:', err);\n      setError(err.message || 'Failed to clear cart');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    cart: {\n      items: cartItems,\n      total,\n      itemCount\n    },\n    loading,\n    error,\n    addToCart,\n    updateCartItemQuantity,\n    removeFromCart,\n    clearCart\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"7kaeqjBmOhrcbK1UoT1SUfvpGYw=\", false, function () {\n  return [useLocalStorage];\n});\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useLocalStorage","ApiService","jsxDEV","_jsxDEV","CartContext","CartProvider","children","_s","cartItems","setCartItems","loading","setLoading","error","setError","total","setTotal","itemCount","setItemCount","calculateTotals","itemTotal","reduce","item","price","discountPrice","quantity","count","addToCart","product","id","prevItems","existingItemIndex","findIndex","updatedItems","success","err","console","message","updateCartItemQuantity","productId","removeFromCart","map","filter","clearCart","value","cart","items","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/GIGABYTE/Documents/phone_selling_app/frontend/User/src/contexts/CartContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useLocalStorage } from '../hooks/useLocalStorage';\r\nimport { ApiService } from '../services/api';\r\n\r\nexport const CartContext = createContext();\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [cartItems, setCartItems] = useLocalStorage('cartItems', []);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [total, setTotal] = useState(0);\r\n  const [itemCount, setItemCount] = useState(0);\r\n\r\n  // Calculate totals whenever cart items change\r\n  useEffect(() => {\r\n    const calculateTotals = () => {\r\n      const itemTotal = cartItems.reduce((total, item) => {\r\n        const price = item.discountPrice || item.price;\r\n        return total + price * item.quantity;\r\n      }, 0);\r\n      \r\n      const count = cartItems.reduce((count, item) => count + item.quantity, 0);\r\n      \r\n      setTotal(itemTotal);\r\n      setItemCount(count);\r\n    };\r\n    \r\n    calculateTotals();\r\n  }, [cartItems]);\r\n\r\n  const addToCart = async (product, quantity = 1) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Call API (in a real app)\r\n      await ApiService.addToCart(product.id, quantity);\r\n      \r\n      // Update local state\r\n      setCartItems(prevItems => {\r\n        // Check if the product is already in the cart\r\n        const existingItemIndex = prevItems.findIndex(item => item.id === product.id);\r\n        \r\n        if (existingItemIndex >= 0) {\r\n          // Product exists, update quantity\r\n          const updatedItems = [...prevItems];\r\n          updatedItems[existingItemIndex] = {\r\n            ...updatedItems[existingItemIndex],\r\n            quantity: updatedItems[existingItemIndex].quantity + quantity\r\n          };\r\n          return updatedItems;\r\n        } else {\r\n          // Product doesn't exist, add new item\r\n          return [...prevItems, { ...product, quantity }];\r\n        }\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Add to cart error:', err);\r\n      setError(err.message || 'Failed to add item to cart');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateCartItemQuantity = (productId, quantity) => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      if (quantity <= 0) {\r\n        // If quantity is zero or negative, remove the item\r\n        removeFromCart(productId);\r\n      } else {\r\n        // Update quantity\r\n        setCartItems(prevItems => \r\n          prevItems.map(item => \r\n            item.id === productId ? { ...item, quantity } : item\r\n          )\r\n        );\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Update cart quantity error:', err);\r\n      setError(err.message || 'Failed to update cart');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const removeFromCart = (productId) => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      setCartItems(prevItems => prevItems.filter(item => item.id !== productId));\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Remove from cart error:', err);\r\n      setError(err.message || 'Failed to remove item from cart');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      setCartItems([]);\r\n      return { success: true };\r\n    } catch (err) {\r\n      console.error('Clear cart error:', err);\r\n      setError(err.message || 'Failed to clear cart');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    cart: {\r\n      items: cartItems,\r\n      total,\r\n      itemCount,\r\n    },\r\n    loading,\r\n    error,\r\n    addToCart,\r\n    updateCartItemQuantity,\r\n    removeFromCart,\r\n    clearCart,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}